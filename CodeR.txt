//  AppDelegate.swift
//  My PubMed Research Assistant
//
//  Description: Legacy UIApplicationDelegate entry point.
//  Version: 0.0.2-alpha

import UIKit

class AppDelegate: UIResponder, UIApplicationDelegate {
    var window: UIWindow?

    func application(
        _ application: UIApplication,
        didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?
    ) -> Bool {
        return true
    }
}


//  ArticleDetailView.swift
//  My PubMed Research Assistant
//
//  Description: View displaying details of a selected PubMed article.
//  Version: 0.0.3-alpha

import SwiftUI

struct ArticleDetailView: View {
    let article: PubMedArticle

    var body: some View {
        ScrollView {
            VStack(alignment: .leading, spacing: 10) {
                Text(article.title)
                    .font(.headline)

                if let abstract = article.abstract, !abstract.isEmpty {
                    Text(abstract)
                        .font(.body)
                } else {
                    Text("No abstract available")
                        .font(.body)
                        .foregroundColor(.gray)
                }

                if let webLink = article.webLink, let url = URL(string: webLink) {
                    Link("Read More", destination: url)
                        .foregroundColor(.blue)
                } else {
                    Text("No valid link available")
                        .foregroundColor(.gray)
                }

                Spacer()
            }
            .padding()
        }
        .navigationTitle("Article Details")
    }
}


//
//  ArticleStorage.swift
//  My PubMed Research Assistant
//
//  Created by Alan D. Keizer
//  ¬© 2025 A. D. Keizer. All rights reserved.
//
//  Description:
//  Manages storing and retrieving PubMed articles from Core Data.
//  Responsible for syncing PubMedArticle structs with the StoredArticle
//  entity in the Core Data stack.
//
//  Version: 00.001.023-alpha
//
// Attribute Name          Type      Optional        Notes
// -----------------------+---------+---------------+-----------------------------------------------
// abstract                String    No              Abstract text
// affiliations            String    Yes             Author affiliations
// authors                 String    Yes             List of authors (comma-separated)
// conflictOfInterest      String    Yes             Conflict of interest statement
// dateSaved               Date      No              When article was saved
// doi                     String    Yes             Digital Object Identifier
// fullTextAvailable       Boolean   No              True/False flag
// funding                 String    Yes             Funding sources
// issue                   String    Yes             Issue number
// journal                 String    Yes             Journal name
// keywords                String    Yes             Keywords (comma-separated)
// meSHterms               String    Yes             Medical Subject Headings (comma-separated)
// pages                   String    Yes             Page numbers
// pmcid                   String    Yes             Optional identifier
// pmid                    String    No              Primary identifier
// pubDate                 Date      Yes             Publication date
// title                   String    No              Article title
// volume                  String    Yes             Volume number
// webLink                 String    Yes             Link to article

import Foundation
import CoreData  // Needed to interact with Core Data entities and context

// Singleton class to handle Core Data persistence
class ArticleStorage {
    static let shared = ArticleStorage() // Singleton instance
    let container: NSPersistentContainer // The persistent store container

    // Initialize Core Data container
    private init() {
        container = NSPersistentContainer(name: "My_PubMed_Research_Assistant") // Matches xcdatamodeld name
        container.loadPersistentStores { desc, error in
            if let error = error {
                print("‚ùå CoreData Load Failed: \(error.localizedDescription)")
            } else {
                print("üü¢ CoreData Store Loaded: \(desc.url?.absoluteString ?? "Unknown")")
            }
        }
    }

    // Save array of PubMedArticle structs into Core Data
    func saveArticles(_ articles: [PubMedArticle]) {
        let context = container.newBackgroundContext()
        context.perform {
            for article in articles {
                let pmid = article.pmid

                let fetch: NSFetchRequest<StoredArticle> = StoredArticle.fetchRequest()
                fetch.predicate = NSPredicate(format: "pmid == %@", pmid)

            
                do {
                    let results = try context.fetch(fetch)
                    let stored = results.first ?? StoredArticle(context: context)

                    // Assign values to Core Data entity (alphabetical order with comments)
                    stored.abstract = article.abstract                                             // Required string.
                    stored.affiliations = article.affiliations?.joined(separator: "; ")            // Optional string.
                    stored.authors = article.authors?.joined(separator: ", ")                      // Optional string.
                    stored.conflictOfInterest = article.conflictOfInterest                         // Optional string.
                    stored.dateSaved = Date()                                                      // Optional date.
                    stored.doi = article.doi                                                       // Optional string.
                    stored.fullTextAvailable = article.fullTextAvailable                           // Required Bool.
                    stored.funding = article.funding?.joined(separator: "; ")                      // Optional string.
                    stored.issue = article.issue                                                   // Optional string.
                    stored.journal = article.journal                                               // Optional string.
                    stored.keywords = article.keywords?.joined(separator: ", ")                    // Optional string.
                    stored.meSHterms = article.meSHterms?.joined(separator: ", ")                  // Optional string.
                    stored.pages = article.pages                                                   // Optional string.
                    stored.pmcid = article.pmcid                                                   // Optional string.
                    stored.pmid = article.pmid                                                     // Required string.
                    stored.pubDate = article.pubDate                                               // Required date.
                    stored.title = article.title                                                   // Required string.
                    stored.volume = article.volume                                                 // Optional string.
                    stored.webLink = article.webLink                                               // Optional string.

                } catch {
                    print("‚ùå Error fetching existing article: \(error)")
                }
            }

            do {
                try context.save() // Commit all changes to disk
                print("üü¢ Articles saved to CoreData.")
            } catch {
                print("‚ùå Failed to save articles: \(error)")
            }
        }
    }

    // Load saved articles, converting them back to PubMedArticle structs
    func loadCachedArticles(for query: String) -> [PubMedArticle] {
        let context = container.viewContext
        let fetch: NSFetchRequest<StoredArticle> = StoredArticle.fetchRequest()

        do {
            let stored = try context.fetch(fetch)
            return stored.map { self.convertStoredToPubMedArticle($0) }
        } catch {
            print("‚ùå Load failed: \(error)")
            return []
        }
    }

    // Convert StoredArticle to PubMedArticle with safe default values
    private func convertStoredToPubMedArticle(_ obj: StoredArticle) -> PubMedArticle {
        // Break long chained expression for compiler stability
        let abstract = obj.abstract // Corrected line                                              // Required string.
        let affiliations = obj.affiliations?.components(separatedBy: "; ") ?? ["N/A"]              // Optional string.
        let authors = obj.authors?.components(separatedBy: ", ") ?? ["Unknown Author"]             // Optional string.
        let conflictOfInterest = obj.conflictOfInterest                                            // Optional string.
        let dateSaved = obj.dateSaved                                                              // Optional date.
        let doi = obj.doi ?? ""                                                                    // Optional string.
        let fullTextAvailable = obj.fullTextAvailable                                              // Required Bool.
        let funding = obj.funding?.components(separatedBy: "; ") ?? ["Not disclosed"]              // Optional string.
        let issue = obj.issue                                                                      // Optional string.
        let journal = obj.journal                                                                  // Optional string.
        let keywords = obj.keywords?.components(separatedBy: ", ") ?? ["None"]                     // Optional string.
        let meSHterms = obj.meSHterms?.components(separatedBy: ", ") ?? ["None"]                   // Optional string.
        let pages = obj.pages                                                                      // Optional string.
        let pmcid = obj.pmcid ?? ""                                                                // Optional string.
        let pmid = obj.pmid                                                                        // Required string.
        let pubDate = obj.pubDate                                                                  // Required date.
        let title = obj.title                                                                      // Required string.
        let volume = obj.volume                                                                    // Optional string.
        let webLink = obj.webLink                                                                  // Optional string.

        return PubMedArticle(
            abstract: abstract,                                                                    // Required string.
            affiliations: affiliations,                                                            // Optional string.
            authors: authors,                                                                      // Optional string.
            conflictOfInterest: conflictOfInterest,                                                // Optional string.
            dateSaved: dateSaved,                                                                  // Optional date.
            doi: doi,                                                                              // Optional string.
            fullTextAvailable: fullTextAvailable,                                                  // Required Bool.
            funding: funding,                                                                      // Optional string.
            issue: issue,                                                                          // Optional string.
            journal: journal,                                                                      // Optional string.
            keywords: keywords,                                                                    // Optional string.
            meSHterms: meSHterms,                                                                  // Optional string.
            pages: pages,                                                                          // Optional string.
            pmcid: pmcid,                                                                          // Optional string.
            pmid: pmid,                                                                            // Required string.
            pubDate: pubDate,                                                                      // Required date.
            title: title,                                                                          // Required string.
            volume: volume,                                                                        // Optional string.
            webLink: webLink                                                                       // Optional string.
        )
    }
}


//  CleanTextField.swift
//  My PubMed Research Assistant
//
//  Description: UIKit-wrapped TextField to remove InputAssistantView constraint crash
//  Version: 0.1.0-alpha

import SwiftUI
import UIKit

struct CleanTextField: UIViewRepresentable {
    @Binding var text: String
    var placeholder: String
    var onCommit: () -> Void

    func makeUIView(context: Context) -> UITextField {
        let field = UITextField()
        field.placeholder = placeholder
        field.font = UIFont(name: "Arial", size: 12)
        field.borderStyle = .roundedRect
        field.returnKeyType = .search
        field.delegate = context.coordinator

        // ‚úÖ Disable input assistant (crashes layout on iOS keyboard)
        let item = field.inputAssistantItem
        item.leadingBarButtonGroups = []
        item.trailingBarButtonGroups = []

        return field
    }

    func updateUIView(_ uiView: UITextField, context: Context) {
        uiView.text = text
    }

    func makeCoordinator() -> Coordinator {
        Coordinator(self)
    }

    class Coordinator: NSObject, UITextFieldDelegate {
        var parent: CleanTextField

        init(_ parent: CleanTextField) {
            self.parent = parent
        }

        func textFieldDidChangeSelection(_ tf: UITextField) {
            parent.text = tf.text ?? ""
        }

        func textFieldShouldReturn(_ tf: UITextField) -> Bool {
            tf.resignFirstResponder()
            parent.onCommit()
            return true
        }
    }
}


//  ContentView.swift
//  My PubMed Research Assistant
//
//  Created by Alan D. Keizer on March 23, 2025.
//  ¬© 2025 A. D. Keizer.  All rights reserved.
//
//  Description:
//  Root view that displays the main PubMed search interface.
//
//  Version: 00.001.007-alpha  Removed reference to Item / CoreData preview

import SwiftUI

struct ContentView: View {
    var body: some View {
        NavigationStack {
            SearchView()
                .navigationTitle("PubMed Search")
        }
    }
}

#Preview {
    ContentView()
        .environment(
            \.managedObjectContext,
            ArticleStorage.shared.container.viewContext
        )
}


//  My_PubMed_Research_AssistantApp.swift
//  My PubMed Research Assistant
//
//  Description: SwiftUI App entry point, CoreData integrated.
//  Version: 0.0.7-alpha

import SwiftUI

@main
struct My_PubMed_Research_AssistantApp: App {
    let persistenceController = ArticleStorage.shared

    init() {
        // ‚úÖ Disable system keyboard input assistant globally
        UITextField.appearance().inputAssistantItem.leadingBarButtonGroups = []
        UITextField.appearance().inputAssistantItem.trailingBarButtonGroups = []
    }

    var body: some Scene {
        WindowGroup {
            ContentView()
                .environment(\.managedObjectContext, persistenceController.container.viewContext)
                .onAppear {
                    NotificationCenter.default.addObserver(
                        forName: UIApplication.didReceiveMemoryWarningNotification,
                        object: nil,
                        queue: .main
                    ) { _ in
                        print("‚ö†Ô∏è Memory warning received! Freeing up resources.")
                        URLCache.shared.removeAllCachedResponses()
                    }
                }
        }
    }
}


//  PersistenceController.swift
//  My PubMed Research Assistant
//
//  Created by Alan D. Keizer on March 23, 2025.
//  ¬© 2025 A. D. Keizer.  All rights reserved.
//
//  Description:
//  This file defines the PersistenceController, a Core Data stack for the app.
//  It manages the NSPersistentContainer used to store, fetch, and persist user data,
//  including stored PubMed articles. It supports both persistent and in-memory stores
//  for testing and production environments.
//
//  Version: 00.000.003-alpha  Fixed property name from abstractText to abstract

import CoreData

struct PersistenceController {
    static let shared = PersistenceController()

    static var preview: PersistenceController = {
        let result = PersistenceController(inMemory: true)
        let viewContext = result.container.viewContext

        for i in 0..<5 {
            let newItem = StoredArticle(context: viewContext)
            newItem.title = "Sample Article \(i)"
            newItem.journal = "Mock Journal"
            newItem.authors = "Author \(i)"
            newItem.abstract = "This is a test abstract"
        }

        do {
            try viewContext.save()
        } catch {
            let nsError = error as NSError
            fatalError("Unresolved error \(nsError), \(nsError.userInfo)")
        }

        return result
    }()

    let container: NSPersistentContainer

    init(inMemory: Bool = false) {
        container = NSPersistentContainer(name: "My_PubMed_Research_Assistant")

        if inMemory {
            container.persistentStoreDescriptions.first?.url = URL(fileURLWithPath: "/dev/null")
        }

        container.loadPersistentStores { storeDescription, error in
            if let error = error as NSError? {
                fatalError("Unresolved error \(error), \(error.userInfo)")
            }
        }

        container.viewContext.automaticallyMergesChangesFromParent = true
        container.viewContext.mergePolicy = NSMergeByPropertyObjectTrumpMergePolicy
    }
}


//
//  PubMedArticle.swift
//  My PubMed Research Assistant
//
//  Created by Alan D. Keizer
//  ¬© 2025 A. D. Keizer. All rights reserved.
//
//  Description:
//  Struct representing a PubMed article in memory.
//  Used for decoding, displaying, and saving to Core Data.
//
//  Version: 00.001.002-alpha
//
// Attribute Name          Type      Optional        Notes
// -----------------------+---------+---------------+-----------------------------------------------
// abstract                String    No              Abstract text
// affiliations            String    Yes             Author affiliations
// authors                 String    Yes             List of authors (comma-separated)
// conflictOfInterest      String    Yes             Conflict of interest statement
// dateSaved               Date      No              When article was saved
// doi                     String    Yes             Digital Object Identifier
// fullTextAvailable       Boolean   No              True/False flag
// funding                 String    Yes             Funding sources
// issue                   String    Yes             Issue number
// journal                 String    Yes             Journal name
// keywords                String    Yes             Keywords (comma-separated)
// meSHterms               String    Yes             Medical Subject Headings (comma-separated)
// pages                   String    Yes             Page numbers
// pmcid                   String    Yes             Optional identifier
// pmid                    String    No              Primary identifier
// pubDate                 Date      Yes             Publication date
// title                   String    No              Article title
// volume                  String    Yes             Volume number
// webLink                 String    Yes             Link to article

import Foundation

struct PubMedArticle {
    // MARK: - Attributes (Alphabetically Sorted)

    var abstract: String                                                                           // Required string.
    var affiliations: [String]?                                                                    // Optional string.
    var authors: [String]?                                                                         // Optional string.
    var conflictOfInterest: String?                                                                // Optional string.
    var dateSaved: Date                                                                            // Optional date.  
    var doi: String?                                                                               // Optional string.
    var fullTextAvailable: Bool                                                                    // Required Bool.  
    var funding: [String]?                                                                         // Optional string.
    var issue: String?                                                                             // Optional string.
    var journal: String?                                                                           // Optional string.
    var keywords: [String]?                                                                        // Optional string.
    var meSHterms: [String]?                                                                       // Optional string.
    var pages: String?                                                                             // Optional string.
    var pmcid: String?                                                                             // Optional string.
    var pmid: String                                                                               // Required string.
    var pubDate: Date?                                                                             // Required date.  
    var title: String                                                                              // Required string.
    var volume: String?                                                                            // Optional string.
    var webLink: String?                                                                           // Optional string.
}


//  PubMedArticleDetail.swift
//  My PubMed Research Assistant
//
//  Description: Detailed JSON model for parsing PubMed summary API response.
//  Version: 0.3.9-alpha

import Foundation

struct PubMedArticleDetails: Codable {
    let result: [String: PubMedArticleDetail]
}

struct PubMedArticleDetail: Codable {
    let uid: String
    let pubdate: String?
    let journal: String?
    let title: String
    let volume: String?
    let issue: String?
    let pages: String?
    let authors: [Author]?
    let doi: String?
    let pmcid: String?
    let abstract: String?
    let webLink: String?

    struct Author: Codable {
        let name: String?
    }
}


//  PubMedSearchResult.swift
//  My PubMed Research Assistant
//
//  Description: Model for initial PubMed search result IDs.
//  Version: 0.1.2-alpha

import Foundation

struct PubMedSearchResult: Codable {
    struct SearchResult: Codable {
        let idlist: [String]?
    }

    let esearchresult: SearchResult?
}


//  PubMedService.swift
//  My PubMed Research Assistant
//
//  Created by Alan D. Keizer
//  ¬© 2025 A. D. Keizer. All rights reserved.
//
//  Description:
//  Fetches article summaries from PubMed APIs.
//  Converts raw API results into structured PubMedArticle structs.
//
//  Version: 00.003.014-alpha
//
//  Change Log:
//  - Fixed decoding bug: replaced deprecated `uid` with `pmid` (decoded from JSON "uid")
//  - All article identifiers now consistently handled using `StringOrInt`
//  - Ensured stable decoding and formatting for robust parsing
//
// Attribute Name          Type      Optional        Notes
// -----------------------+---------+---------------+-----------------------------------------------
// abstract                String    No              Abstract text
// affiliations            String    Yes             Author affiliations
// authors                 String    Yes             List of authors (comma-separated)
// conflictOfInterest      String    Yes             Conflict of interest statement
// dateSaved               Date      No              When article was saved
// doi                     String    Yes             Digital Object Identifier
// fullTextAvailable       Boolean   No              True/False flag
// funding                 String    Yes             Funding sources
// issue                   String    Yes             Issue number
// journal                 String    Yes             Journal name
// keywords                String    Yes             Keywords (comma-separated)
// meSHterms               String    Yes             Medical Subject Headings (comma-separated)
// pages                   String    Yes             Page numbers
// pmcid                   String    Yes             Optional identifier
// pmid                    String    No              Primary identifier
// pubDate                 Date      Yes             Publication date
// title                   String    No              Article title
// volume                  String    Yes             Volume number
// webLink                 String    Yes             Link to article

import Foundation

class PubMedService {
    private let searchBaseURL = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=pubmed&retmode=json&term="
    private let summaryBaseURL = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi?db=pubmed&retmode=json&id="

    // Retry-capable fetch for resilience
    private func fetchData(from url: URL, retries: Int = 3) async throws -> (Data, URLResponse) {
        for attempt in 1...retries {
            do {
                print("üåê Attempt \(attempt): Fetching \(url.absoluteString)")
                let (data, response) = try await URLSession.shared.data(from: url)
                return (data, response)
            } catch {
                print("‚ö†Ô∏è Attempt \(attempt) failed: \(error.localizedDescription)")
                if attempt == retries { throw error }
                try await Task.sleep(nanoseconds: 500_000_000) // Wait 0.5s before retry
            }
        }
        throw URLError(.cannotLoadFromNetwork)
    }

    // Asynchronous article search + summary fetch
    func searchArticlesAsync(query: String) async throws -> [PubMedArticle] {
        // STEP 1: Search article IDs
        let encodedQuery = query.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed) ?? ""
        guard let searchURL = URL(string: searchBaseURL + encodedQuery) else {
            throw URLError(.badURL)
        }

        let (searchData, searchResponse) = try await fetchData(from: searchURL)
        guard (searchResponse as? HTTPURLResponse)?.statusCode == 200 else {
            throw URLError(.badServerResponse)
        }

        print("‚úÖ Search completed")
        let idResult = try JSONDecoder().decode(PubMedSearchResult.self, from: searchData)
        guard let ids = idResult.esearchresult?.idlist, !ids.isEmpty else {
            print("‚ö†Ô∏è No article IDs found.")
            return []
        }

        // STEP 2: Fetch summary details
        let idString = ids.joined(separator: ",")
        guard let summaryURL = URL(string: summaryBaseURL + idString) else {
            throw URLError(.badURL)
        }

        let (summaryData, summaryResponse) = try await fetchData(from: summaryURL)
        guard (summaryResponse as? HTTPURLResponse)?.statusCode == 200 else {
            throw URLError(.badServerResponse)
        }

        print("‚úÖ Summary data fetched")
        let decoder = JSONDecoder()
        decoder.keyDecodingStrategy = .convertFromSnakeCase
        let result = try decoder.decode(PubMedArticleDetails.self, from: summaryData)

        // STEP 3: Convert result map to PubMedArticle structs
        let validArticles = ids.compactMap { id -> PubMedArticle? in
            guard let detail = result.result[id] else { return nil }

            return PubMedArticle(
                abstract: detail.abstract ?? "",                                                    // Required string
                affiliations: nil,                                                                  // Optional string
                authors: detail.authors?.compactMap { $0.name },                                    // Optional string
                conflictOfInterest: nil,                                                            // Optional string
                dateSaved: Date(),                                                                  // Required date
                doi: detail.doi,                                                                    // Optional string
                fullTextAvailable: false,                                                           // Required Bool
                funding: nil,                                                                       // Optional string
                issue: detail.issue,                                                                // Optional string
                journal: detail.journal,                                                            // Optional string
                keywords: nil,                                                                      // Optional string
                meSHterms: nil,                                                                     // Optional string
                pages: detail.pages,                                                                // Optional string
                pmcid: detail.pmcid,                                                                // Optional string
                pmid: detail.pmid.stringValue,                                                      // ‚úÖ Corrected reference
                pubDate: convertToDate(detail.pubdate),                                             // Optional date
                title: detail.title,                                                                // Required string
                volume: detail.volume,                                                              // Optional string
                webLink: detail.webLink                                                             // Optional string
            )
        }

        return validArticles
    }

    // Converts string like "2024 Mar" to Date
    private func convertToDate(_ str: String?) -> Date? {
        guard let str = str else { return nil }
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy MMM"
        return formatter.date(from: str)
    }
}


//  SearchBar.swift
//  My PubMed Research Assistant
//
//  Description: Custom SwiftUI search bar component.
//  Version: 0.0.5-alpha

import SwiftUI

struct SearchBar: View {
    @Binding var text: String
    var onSearch: () -> Void

    var body: some View {
        HStack {
            Image(systemName: "magnifyingglass")
                .foregroundColor(.gray)

            TextField("Search PubMed...", text: $text, onCommit: onSearch)
                .disableAutocorrection(true)

            if !text.isEmpty {
                Button(action: { text = "" }) {
                    Image(systemName: "xmark.circle.fill")
                        .foregroundColor(.gray)
                }
            }
        }
        .padding(10)
        .background(RoundedRectangle(cornerRadius: 8).fill(Color(.systemGray6)))
        .padding(.horizontal)
    }
}


//  SearchView.swift
//  My PubMed Research Assistant
//
//  Description: Search screen and user entry point.
//  Version: 0.6.16-alpha

import SwiftUI

struct SearchView: View {
    @State private var searchQuery: String = "Myelin THC"
    @State private var isSearching = false
    @State private var searchResults: [PubMedArticle] = []
    @State private var errorMessage: String?
    @FocusState private var isTextFieldFocused: Bool

    var body: some View {
        NavigationStack {
            VStack(alignment: .leading, spacing: 16) {
                Text("PubMed Search")
                    .font(.title)
                    .bold()
                    .padding(.top, 10)

                HStack {
                    CleanTextField(
                        text: $searchQuery,
                        placeholder: "Search PubMed",
                        onCommit: {
                            performSearch()
                            isTextFieldFocused = false
                        }
                    )
                    .frame(height: 36)

                    Button(action: {
                        performSearch()
                        isTextFieldFocused = false
                    }) {
                        Image(systemName: "magnifyingglass")
                            .font(.title2)
                            .padding(10)
                    }
                    .background(Color(red: 0.235, green: 0.231, blue: 0.431))
                    .foregroundColor(.white)
                    .cornerRadius(8)
                }
                .padding(.horizontal)

                if isSearching {
                    ProgressView("Searching...")
                        .progressViewStyle(CircularProgressViewStyle())
                        .padding()
                } else if let errorMessage = errorMessage {
                    Text("‚ùå \(errorMessage)")
                        .foregroundColor(.red)
                        .padding()
                } else if searchResults.isEmpty {
                    Text("No results found.")
                        .foregroundColor(.gray)
                        .padding()
                } else {
                    List(searchResults, id: \.pmid) { article in
                        NavigationLink(destination: ArticleDetailView(article: article)) {
                            VStack(alignment: .leading) {
                                Text(article.title)
                                    .font(.headline)
                                if let authors = article.authors {
                                    Text(authors.joined(separator: ", "))
                                        .font(.caption)
                                        .foregroundColor(.secondary)
                                }
                            }
                        }
                    }
                    .listStyle(.plain)
                }

                Spacer()
            }
            .padding()
            .onTapGesture { isTextFieldFocused = false }
            .background(Color.white)
            .foregroundColor(Color(red: 0.235, green: 0.231, blue: 0.431))
            .font(.custom("Arial", size: 12))
            .ignoresSafeArea(.keyboard, edges: .bottom)
        }
    }

    private func performSearch() {
        isSearching = true
        errorMessage = nil
        searchResults = []

        Task {
            do {
                let results = try await PubMedService().searchArticlesAsync(query: searchQuery)
                await MainActor.run {
                    self.searchResults = results
                    self.isSearching = false
                }
            } catch {
                await MainActor.run {
                    self.errorMessage = "Search failed: \(error.localizedDescription)"
                    self.isSearching = false
                }
            }
        }
    }
}


//
//  StoredArticle+CoreDataClass.swift
//  My PubMed Research Assistant
//
//  Created by Alan Keizer on 3/23/25.
//
//

import Foundation
import CoreData


public class StoredArticle: NSManagedObject {

}


//
//  StoredArticle+CoreDataProperties.swift
//  My PubMed Research Assistant
//
//  Created by Alan Keizer on March 23, 2025.
//  ¬© 2025 A. D. Keizer. All rights reserved.
//
//  Description:
//  This extension defines the properties of the `StoredArticle` Core Data entity.
//  It includes article metadata fetched from PubMed and saved by the user.
//
//  Version: 00.000.002-alpha
//
// Attribute Name          Type      Optional        Notes
// -----------------------+---------+---------------+-----------------------------------------------
// abstract                String    No              Abstract text
// affiliations            String    Yes             Author affiliations
// authors                 String    Yes             List of authors (comma-separated)
// conflictOfInterest      String    Yes             Conflict of interest statement
// dateSaved               Date      No              When article was saved
// doi                     String    Yes             Digital Object Identifier
// fullTextAvailable       Boolean   No              True/False flag
// funding                 String    Yes             Funding sources
// issue                   String    Yes             Issue number
// journal                 String    Yes             Journal name
// keywords                String    Yes             Keywords (comma-separated)
// meSHterms               String    Yes             Medical Subject Headings (comma-separated)
// pages                   String    Yes             Page numbers
// pmcid                   String    Yes             Optional identifier
// pmid                    String    No              Primary identifier
// pubDate                 Date      Yes             Publication date
// title                   String    No              Article title
// volume                  String    Yes             Volume number
// webLink                 String    Yes             Link to article

import Foundation
import CoreData

extension StoredArticle {

    @nonobjc public class func fetchRequest() -> NSFetchRequest<StoredArticle> {
        return NSFetchRequest<StoredArticle>(entityName: "StoredArticle")
    }

    @NSManaged public var abstract: String                                                         // Required string.
    @NSManaged public var affiliations: String?                                                    // Optional string.
    @NSManaged public var authors: String?                                                         // Optional string.
    @NSManaged public var conflictOfInterest: String?                                              // Optional string.
    @NSManaged public var dateSaved: Date                                                          // Required date.
    @NSManaged public var doi: String?                                                             // Optional string.
    @NSManaged public var fullTextAvailable: Bool                                                  // Required Bool.
    @NSManaged public var funding: String?                                                         // Optional string.
    @NSManaged public var issue: String?                                                           // Optional string.
    @NSManaged public var journal: String?                                                         // Optional string.
    @NSManaged public var keywords: String?                                                        // Optional string.
    @NSManaged public var meSHterms: String?                                                       // Optional string.
    @NSManaged public var pages: String?                                                           // Optional string.
    @NSManaged public var pmcid: String?                                                           // Optional string.
    @NSManaged public var pmid: String                                                             // Required string.
    @NSManaged public var pubDate: Date?                                                           // Optional date.
    @NSManaged public var title: String                                                            // Required string.
    @NSManaged public var volume: String?                                                          // Optional string.
    @NSManaged public var webLink: String?                                                         // Optional string.
}

extension StoredArticle: Identifiable { }



<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>CFBundleDevelopmentRegion</key>
    <string>en</string>
    <key>CFBundleExecutable</key>
    <string>$(EXECUTABLE_NAME)</string>
    <key>CFBundleIdentifier</key>
    <string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
    <key>CFBundleInfoDictionaryVersion</key>
    <string>6.0</string>
    <key>CFBundleName</key>
    <string>$(PRODUCT_NAME)</string>
    <key>CFBundlePackageType</key>
    <string>APPL</string>
    <key>CFBundleShortVersionString</key>
    <string>1.0</string>
    <key>CFBundleVersion</key>
    <string>1</string>
    <key>LSRequiresIPhoneOS</key>
    <true/>
    <key>UILaunchStoryboardName</key>
    <string>LaunchScreen</string>
    <key>UIMainStoryboardFile</key>
    <string></string>
    <key>UIApplicationSceneManifest</key>
    <dict>
        <key>UIApplicationSupportsMultipleScenes</key>
        <false/>
    </dict>
</dict>
</plist>


